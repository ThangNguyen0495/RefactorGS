name: Run Android Test with Docker image

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Select the target environment"
        required: true
        type: choice
        options:
          - CA2 VN
          - CA2 BIZ
          - CA VN
          - CA BIZ
          - Staging VN
          - Staging BIZ
          - Production VN
          - Production BIZ
        default: "Staging VN"
      testType:
        description: "Select the test type"
        required: true
        type: choice
        options:
          - Smoke Test
          - Regression Test
        default: "Smoke Test"
      test_configs:
        description: >
          List of test configurations (JSON format). 
          Example: 
          [
            "AndroidGoSELLERCreateProductTest.xml",
            "AndroidGoSELLERUpdateProductTest.xml",
            "AndroidGoSELLERSupplierTest.xml",
            "AndroidGoBuyerProductDetail.xml"
          ]
        required: true
        type: string
        default: '[]'

run-name: "[${{ github.event.inputs.environment }}][${{ github.event.inputs.testType }}] Run android test with Docker image ${{ github.event.inputs.test_configs }}"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.inputs.environment }}-${{ github.event.inputs.testType }}-${{ github.event.inputs.test_configs }}
  cancel-in-progress: true

jobs:
  JOB:
    env:
      TEST_TYPE: ${{ github.event.inputs.testType == 'Smoke Test' && 'smoke' || 'regression' }}
    strategy:
      fail-fast: false
      matrix:
        xmlConfiguration: ${{ fromJson(inputs.test_configs) }}

    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Set User Type
        run: |
          test_name=$(basename "${{ matrix.xmlConfiguration }}" .xml)
          echo "test_name=$test_name" >> $GITHUB_ENV
          if echo "$test_name" | grep -qE "SELLER"; then
            user_type="seller"
          else
            user_type="buyer"
          fi
          echo "user_type=$user_type" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check and Cache Docker Image ID
        id: cache-docker
        run: |
          # Get the current image ID of the Docker image
          IMAGE_ID=$(docker images --format '{{.ID}}' thangnguyen0495/android-appium:latest)

          # Check if a cached image ID exists from previous runs
          if [ -f "${{ github.workspace }}/.docker-cache/image_id.txt" ]; then
            PREVIOUS_IMAGE_ID=$(cat ${{ github.workspace }}/.docker-cache/image_id.txt)
          else
            PREVIOUS_IMAGE_ID=""
          fi

          # If the image ID has changed, pull the new image and cache the ID
          if [ "$IMAGE_ID" != "$PREVIOUS_IMAGE_ID" ]; then
            echo "Image ID has changed. Pulling new image."
            docker pull thangnguyen0495/android-appium:latest
            echo $IMAGE_ID > ${{ github.workspace }}/.docker-cache/image_id.txt
          
            # Set the environment variable to indicate that the cache is not used
            echo "cache-hit=false" >> $GITHUB_ENV
          else
            # If the image ID is the same, use the cached image
            echo "Using cached image."
            echo "cache-hit=true" >> $GITHUB_ENV
          fi

      - name: Pull Docker Image if Cache Miss
        if: env.cache-hit == 'false'
        run: |
          # If cache miss, pull the Docker image and save it into the cache
          echo "Cache miss - pulling Docker image"
          docker pull thangnguyen0495/android-appium:latest
          
          # Create the cache directory if it doesn't exist
          mkdir -p ${{ github.workspace }}/.docker-cache
          
          # Save the pulled Docker image into the cache
          docker save -o ${{ github.workspace }}/.docker-cache/android-appium.tar thangnguyen0495/android-appium:latest
          echo "Docker image saved as .docker-cache/android-appium.tar"

      - name: Load Cached Docker Image if Cache Hit
        if: env.cache-hit == 'true'
        run: |
          # If cache hit, load the Docker image from the cache
          echo "Cache hit - loading Docker image from cache"
          # Check if the cached image file exists before loading it
          if [ -f "${{ github.workspace }}/.docker-cache/android-appium.tar" ]; then
            docker load -i ${{ github.workspace }}/.docker-cache/android-appium.tar
          else
            echo "Error: Cache file android-appium.tar not found!"
            echo "Cache miss - pulling Docker image"
            # Pull the Docker image from the registry if the cache file is not found
            docker pull thangnguyen0495/android-appium:latest
            # Save the pulled image to cache directory
            mkdir -p ${{ github.workspace }}/.docker-cache
            docker save -o ${{ github.workspace }}/.docker-cache/android-appium.tar thangnguyen0495/android-appium:latest
          fi

      - name: Load Cached Docker Image if Cache Hit
        if: env.cache-hit == 'true'
        run: |
          echo "Cache hit - loading Docker image from cache"
          docker load -i ${{ github.workspace }}/.docker-cache/android-appium.tar

      - name: Start Docker Container
        run: |
          docker run -d --name emulator-container --privileged \
            thangnguyen0495/android-appium:latest

      - name: Wait for Emulator to Start
        run: |
          docker logs emulator-container

      - name: Run Maven inside Docker with JDK 22
        run: |
          docker cp . emulator-container:/app
          docker exec emulator-container adb devices
          docker exec emulator-container bash -c "
            cd /app && \
            mvn install -DskipTests && \
            echo '${{ secrets.ENV_FILES }}' > src/main/resources/config.properties && \
            echo '${{ vars.APP_URL }}' >> src/main/resources/config.properties && \
            echo '${{ vars.REUSE_VARIABLE }}' >> src/main/resources/config.properties && \
            mvn test -DsuiteFile=src/test/resources/${{ env.TEST_TYPE }}/android/${{ env.user_type }}/${{ matrix.xmlConfiguration }}"

      - name: Copy Test Reports from Container
        if: always()
        run: docker cp emulator-container:/app/target/ExtentReport.html ./${{ env.test_name }}.html

      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.test_name }}
          path: ./${{ env.test_name }}.html
